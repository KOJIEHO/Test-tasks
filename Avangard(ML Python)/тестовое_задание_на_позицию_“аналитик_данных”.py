# -*- coding: utf-8 -*-
"""Тестовое задание на позицию “Аналитик данных”.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mkoYdHdwEwPz4G13okSdK0Q53zd5Gq7g
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt
from scipy import stats

df = pd.read_csv('train.csv')
df

missing_num = test.isnull().sum()
print(missing_num)

# Обработаем продажи
for count, x in enumerate(df['Sales']):
  df['Sales'][count] = float(x.replace(',', '.'))

# Обработаем дату
for count, x in enumerate(df['Order Date']):
  tmp = x.split('/')
  date = f"{tmp[2]}-{tmp[1]}-{tmp[0]}"
  df['Order Date'][count] = date

# Построим график
sns.displot(df['Sub-Category'], height=6, aspect=3)

# Получим максимальную дату
df['Order Date'].max()

# Построим график для последних двух лет
df_last_two_years = df[df['Order Date'] >= '2016-12-30']
sns.displot(df_last_two_years['Sub-Category'], height=6, aspect=3)
df_last_two_years['Sub-Category'].value_counts()

# Построим график для последнего года
df_last_year = df[df['Order Date'] >= '2017-12-30']
sns.displot(df_last_year['Sub-Category'], height=6, aspect=3)
df_last_year['Sub-Category'].value_counts()

sns.boxplot(df['Sales']).set_title('Sales')
M = df['Sales'].median()
sigma = df['Sales'].std()
print("M", M)
print("СКО", sigma)

# Заменяем выбросы
df.loc[(df['Sales'] <= M - 3*sigma) | (df['Sales'] >= M + 3*sigma), 'Sales'] = df['Sales'].median()
sns.boxplot(df['Sales']).set_title('Sales')
df['Sales'].median()
# МО не поменялось

# Разобьем на группы по продажам
df['Sale_group'] = pd.cut(df['Sales'], bins=3, labels=False)
df
# 0 - small;  1 - average ;  2 - high

group_df = df.groupby(['Region', 'Sale_group']).agg({'Sales': ['sum', 'mean', 'median', 'min', 'max', 'count']})
group_df

# Отфильтруем по сумме продаж
group_df['Sales'].sort_values(by='sum')

# Отфильтруем по средней
group_df['Sales'].sort_values(by='mean')

# Отфильтруем по максимальной
group_df['Sales'].sort_values(by='max')

# Отфильтруем по минимальной
group_df['Sales'].sort_values(by='min')

# Отфильтруем по количеству продаж
group_df['Sales'].sort_values(by='count')